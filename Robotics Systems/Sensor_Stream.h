/*************************
 * DO NOT EDIT THIS FILE *
 *************************/

/* This file contains the Sensor_Stream Class, 
 * use the public methods to read in sensor data */

#include <fstream>

#ifndef SENSOR_STREAM_H
#define SENSOR_STREAM_H

/**
 * Short description
 *
 * Long description
 */
class Sensor_Stream
{
public:
    /**
     * Available sensor streams
     *
     * These values are used as arguments to the construrctor functions
     * to select different sensor streams
     */
    enum sensorId_t
    {
        SENSOR_1,
        SENSOR_2,
        SENSOR_3
    };

    /**
     * Sensor stream read state
     *
     * These enums are used to indicate the success of the get_data
     * function.
     */
    enum flagState_t
    {
        /// Data has been successfully retrieved from the log
        FLAG_DATA_GOOD,
        /// There was an error interpreting the line of data
        FLAG_DATA_LINE_ERROR,
        /// The end of the file has been reached
        FLAG_DATA_FILE_END,
        /// The sensor log file is not open
        FLAG_DATA_FILE_CLOSED
    };

    /**
     * Constructor for the Control_Output class
     *
     * @param sensor_id enum sensorId_t value specifiying the sensor stream
     */
    Sensor_Stream(sensorId_t sensor_id);

    /**
     * Deconstructor
     */
    ~Sensor_Stream();

    /**
     * Retrieve next line of data from the stream file
     *
     * @param[out] pFlag data success pointer - see flagState_t for detail of meaning
     * @returns if succesful returns the next line of data, otherwise returns nan
     */
    float get_data(flagState_t *pFlag);

    /**
     * Close the data file - this releases the read lock
     */
    void close_stream();

private:
    const std::string _sensor_folder = "_StreamData";
    std::fstream _mFile;
};

#endif

// EOF
