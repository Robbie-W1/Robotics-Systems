/*************************
 * DO NOT EDIT THIS FILE *
 *************************/
#include <ctime>
#include <chrono>
#include <string>
#include <iostream>

#include "Logger.h"

// Internal Logger methods
Logger::Logger(logType_t log_point) : Logger(log_point, "") {}

Logger::Logger(logType_t log_point, const std::string &save_folder)
    : Logger_Base(_get_log_short_name(log_point), save_folder),
      _log_type(log_point)
{
    _init();
    if (is_log_open())
    {
        std::cout << "Logger: Saving " << _get_log_name(_log_type) << " to file: " << _mFileName << std::endl;
    }
}

bool Logger::log_value(float value)
{
    if (is_log_open())
    {
        _mFile << _mLine_num << ", " << value << std::endl;
        _mLine_num++;
        return true;
    }
    else
    {
        std::cout << "Logger_Base: Output file not open" << std::endl;
        return false;
    }
}

std::string Logger::_get_log_short_name(logType_t log_point)
{
    switch (log_point)
    {
    case LOG_POINT_A:
        return "lp_a";
    case LOG_POINT_B:
        return "lp_b";
    case LOG_POINT_C:
        return "lp_c";
    case LOG_POINT_D:
        return "lp_d";
    case LOG_POINT_E:
        return "lp_e";
    case LOG_POINT_F:
        return "lp_f";

    case USER_DEFINED_1:
        return "ud_1";
    case USER_DEFINED_2:
        return "ud_2";

    default:
        return "na";
    }
    return "test";
}

std::string Logger::_get_log_name(logType_t log_point)
{
    switch (log_point)
    {
    case LOG_POINT_A:
        return "log point A";
    case LOG_POINT_B:
        return "log point B";
    case LOG_POINT_C:
        return "log point C";
    case LOG_POINT_D:
        return "log point D";
    case LOG_POINT_E:
        return "log point E";
    case LOG_POINT_F:
        return "log point F";

    case USER_DEFINED_1:
        return "user defined #1";
    case USER_DEFINED_2:
        return "user defined #2";

    default:
        return "unknown";
    }
    return "test";
}

// Logger base methods
Logger_Base::Logger_Base(const std::string &log_name, const std::string &save_folder)
    : _save_folder(save_folder), _log_name(log_name) {}

Logger_Base::~Logger_Base()
{
    close_output();
}

void Logger_Base::close_output()
{
    if (is_log_open())
    {
        _mFile.close();
    }
}

bool Logger_Base::is_log_open()
{
    return _mFile.is_open();
}

void Logger_Base::_generate_filename()
{
    auto time = std::chrono::system_clock::now();
    auto t = std::chrono::system_clock::to_time_t(time);
    auto now = std::localtime(&t);

    snprintf(_mFileName, _cOutput_DateTime_Len,
             "%s/%s_%d-%02d-%02d_%02d-%02d-%02d.csv",
             _save_folder.c_str(), _log_name.c_str(),
             (now->tm_year + _cOutput_Year_Offset),
             now->tm_mon, now->tm_mday,
             now->tm_hour, now->tm_min, now->tm_sec);
}

void Logger_Base::_write_header()
{
    if (is_log_open())
    {
        _mFile << _log_name << std::endl;
        _mFile << "----------------" << std::endl;
        _mFile << "line no"
               << ", "
               << "output 1"
               << std::endl;
    }
    else
    {
        std::cout << "Logger_Base: Could not write log header, the log file is not open" << std::endl;
    }
}

void Logger_Base::_open_output_file()
{
    _mFile = std::ofstream(_mFileName);

    if (!is_log_open())
    {
        std::cout << "Logger_Base: Could not create \"" << _log_name << "\" file. ";
        if (_save_folder != "")
            std::cout << "Does the folder \"" << _save_folder << "\" exist?";
        std::cout << std::endl;
    }
}

void Logger_Base::_init()
{
    _generate_filename();
    _open_output_file();
    _write_header();
}
// EOF
