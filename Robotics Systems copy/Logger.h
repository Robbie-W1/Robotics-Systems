/*************************
 * DO NOT EDIT THIS FILE *
 *************************/

/* This file contains the Logger Class, use the
 * public methods to log your data */

#include <fstream>
#include <string>

#ifndef LOGGER_H
#define LOGGER_H

/**
 * Logger_Base class provides the base behaviour for data logging.
 * !!!It cannot be used directly!!!
 */
class Logger_Base
{
public:
    /*
     * Close the log file - releases the write lock
     */
    void close_output();

    /**
     * Check if the log file is open
     *
     * @returns returns a boolean true if the log file is open, false otherwise
     */
    bool is_log_open();

protected:
    const std::string _save_folder = "";
    const std::string _log_name = "out_";

    std::ofstream _mFile;
    uint32_t _mLine_num = 1;

    static const uint16_t _cOutput_Year_Offset = 1900;
    static const uint16_t _cOutput_DateTime_Len = 200;

    char _mFileName[_cOutput_DateTime_Len];

    Logger_Base(const std::string &log_name, const std::string &save_folder);
    ~Logger_Base();

    virtual void _init();
    void _open_output_file();
    void _generate_filename();
    virtual void _write_header();
};

/**
 * The Logger class provides save data to a .csv file.
 * In inherits from the Logger_Base class
 */
class Logger : public Logger_Base
{
    // Use these functions
public:
    /**
     * Available log headers
     *
     * These values are used as arguments to the construrctor functions
     * to specify which log point the user is settings
     */
    enum logType_t
    {
        LOG_POINT_A,
        LOG_POINT_B,
        LOG_POINT_C,
        LOG_POINT_D,
        LOG_POINT_E,
        LOG_POINT_F,
        /// The following are undefined and may be used as you wish
        USER_DEFINED_1,
        USER_DEFINED_2
    };

    /**
     * Constructor for the Logger class
     *
     * @param log_point enum logType_t value specifiying the log location
     */
    Logger(logType_t log_point);

    /**
     * Constructor for the Logger class
     *
     * @param log_point enum logType_t value specifiying the log location
     * @param save_folder string input specifying the save folder for the .csv file
     */
    Logger(logType_t log_point, const std::string &save_folder);

    /**
     * Constructor for the Logger class
     *
     * @param value string input specifying the save folder for the .csv file
     * @returns boolean true if log succesful, false otherwise
     */
    bool log_value(float value);

private:
    const logType_t _log_type;

    std::string _get_log_short_name(logType_t log_point);
    std::string _get_log_name(logType_t log_point);
};

#endif

// EOF
